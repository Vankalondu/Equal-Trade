// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

model User {
  id                String                    @id @default(uuid())
  email             String                    @unique @db.VarChar(255) // Indexed for unique constraint
  phone             String?                   @unique @db.VarChar(20) // Indexed for unique constraint
  userName          String
  passwordHash      String
  userType          UserType                  @default(BOTH)
  isVerified        Boolean                   @default(false)
  createdAt         DateTime                  @default(now())
  accessibilityPref AccessibilityPreferences?
  seller            Seller?
  buyer             Buyer?
  voiceLogs         VoiceInteractionLog[]
  orders            Order[]
  cartItems         CartItem[]
  reviews           Review[]
  notifications     Notification[]
}

enum UserType {
  BUYER
  SELLER
  BOTH
  ADMIN
}

model AccessibilityPreferences {
  id             String   @id @default(uuid())
  userId         String   @unique
  mode           String // voice, enhanced_text, hybrid
  fontPreference String?
  contrastMode   Boolean
  voiceSpeed     Int // 1 to 5
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id])
}

model Seller {
  id               String    @id @default(uuid())
  businessName     String
  businessCategory String
  products         Product[]
  user             User      @relation(fields: [id], references: [id])
}

model Buyer {
  id     String  @id @default(uuid())
  user   User    @relation(fields: [id], references: [id])
  orders Order[]
}

model Product {
  id            String      @id @default(uuid())
  sellerId      String
  name          String
  description   String
  category      String
  price         Float
  isActive      Boolean     @default(true)
  imageUrl      String
  imageAltText  String
  stockQuantity Int         @default(0) // Prisma will use Int as a valid type for PostgreSQL
  createdAt     DateTime    @default(now())
  seller        Seller      @relation(fields: [sellerId], references: [id])
  orderItems    OrderItem[]
  cartItems     CartItem[]
  reviews       Review[]

  @@index([name]) // Index for product name
}

model Order {
  id             String          @id @default(uuid())
  buyerId        String
  totalPrice     Float
  paymentStatus  PaymentStatus
  voiceConfirmed Boolean         @default(false)
  createdAt      DateTime        @default(now())
  buyer          Buyer           @relation(fields: [buyerId], references: [id])
  orderItems     OrderItem[]
  orderTracking  OrderTracking[]
  User           User?           @relation(fields: [userId], references: [id])
  userId         String?
  payment        Payment?

  @@index([userId]) // Index for userId for order lookups
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@index([productId]) // Index for productId to quickly fetch related products
}

model VoiceInteractionLog {
  id        String   @id @default(uuid())
  userId    String
  command   String
  response  String
  success   Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId]) // Index for userId for voice log lookups
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@index([productId]) // Index for productId to fetch cart items quickly
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@index([productId]) // Index for productId to fetch product reviews
}

model OrderTracking {
  id             String   @id @default(uuid())
  orderId        String
  trackingNumber String
  carrier        String
  status         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  order          Order    @relation(fields: [orderId], references: [id])

  @@index([orderId]) // Index for orderId to track orders
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId]) // Index for userId to easily fetch notifications for users
}

model Payment {
  id        String        @id @default(uuid())
  orderId   String        @unique
  amount    Float
  status    PaymentStatus
  createdAt DateTime      @default(now())
  order     Order         @relation(fields: [orderId], references: [id])

  @@index([orderId]) // Index for orderId to fetch payment details for an order
}
